buildscript {
	ext {
        SpringVersion = '5.2.5.RELEASE'
    }
	repositories {
		maven {
			url = "http://192.168.0.243:8081/repository/maven-public/"
			credentials {
				username 'admin'
				password 'admin123'
			}
		}
		jcenter()
	}
    dependencies {
    	classpath 'io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'io.spring.dependency-management'

ext {
	versions = [
		"java" : "11"
	]
	
	projectEncoding = "UTF-8"
	warName = getProperty("war.name") + ".war";
}

[compileJava, compileTestJava]*.sourceCompatibility = "${versions.java}"
[compileJava, compileTestJava]*.targetCompatibility = "${versions.java}"
[compileJava, compileTestJava]*.options*.encoding   = "${projectEncoding}"

war {
	archiveName = warName
	manifest {
		attributes 'Manifest-Version': '1.0', 'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
	}
}

repositories {
	// Use jcenter for resolving dependencies.
	// You can declare any Maven/Ivy/file repository here.
	maven {
		url = "http://192.168.0.243:8081/repository/maven-public/"
		credentials {
			username 'admin'
			password 'admin123'
		}
	}
	jcenter()
}

configurations {
    mybatisGenerator
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.   
    implementation 'org.apache.logging.log4j:log4j-core:2.13.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.1'
    implementation 'org.apache.logging.log4j:log4j-web:2.13.1'
    
    implementation 'com.github.pagehelper:pagehelper:5.1.11'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

	// aspectj
	implementation 'org.aspectj:aspectjweaver:1.8.6'
	
	// Use Spring framework mvc
	implementation "org.springframework:spring-beans:${SpringVersion}"
	implementation "org.springframework:spring-context-support:${SpringVersion}"
	implementation "org.springframework:spring-context:${SpringVersion}"
	implementation "org.springframework:spring-web:${SpringVersion}"
	implementation "org.springframework:spring-webmvc:${SpringVersion}"
	implementation "org.springframework:spring-tx:${SpringVersion}"
	implementation "org.springframework:spring-jdbc:${SpringVersion}"
	testImplementation "org.springframework:spring-test:${SpringVersion}"
	
	implementation 'commons-fileupload:commons-fileupload:1.4'
	implementation 'org.apache.commons:commons-lang3:3.10'

	// mybatis
	implementation 'org.mybatis:mybatis-spring:2.0.4'
	implementation 'org.mybatis:mybatis:3.5.4'
	
	// mysql driver
	implementation 'mysql:mysql-connector-java:5.1.48'
	//implementation 'com.alibaba:druid:1.1.22'
	
	implementation "com.fasterxml.jackson.core:jackson-databind:2.10.3"
	implementation "com.fasterxml.jackson.core:jackson-annotations:2.10.3"
	implementation "com.fasterxml.jackson.core:jackson-core:2.10.3"
	
	implementation 'jstl:jstl:1.2'
	implementation 'taglibs:standard:1.1.2'
	
	// shiro
	implementation 'org.apache.shiro:shiro-core:1.5.2'
	implementation 'org.apache.shiro:shiro-web:1.5.2'
	implementation 'org.apache.shiro:shiro-ehcache:1.5.2'
	implementation 'org.apache.shiro:shiro-spring:1.5.2'
	implementation 'org.crazycake:shiro-redis:3.2.3'
	
	// dozer
	implementation 'net.sf.dozer:dozer:5.5.1'
	implementation 'net.sf.dozer:dozer-spring:5.5.1'
	
	// oshi-core
	implementation 'com.github.oshi:oshi-core:4.6.0'

	// Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // webjars
    implementation 'org.webjars:webjars-locator:0.39'
    implementation 'org.webjars:jquery:3.4.1'
    implementation 'org.webjars:font-awesome:4.7.0'
    implementation 'org.webjars:layui:2.5.6'
    implementation 'org.webjars:bootstrap:3.4.1'
    implementation 'org.webjars:echarts:4.6.0'
	
	//include in compile only, exclude in the war
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	providedCompile 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'	
	
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.4.0'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.48'
    mybatisGenerator 'tk.mybatis:mapper:4.1.5'
}

ext {
	mybatisGenerator = [
		"propertiesFile" : file(projectDir.path + getProperty("generatorProperties")),
		"generatorFile"	 : projectDir.path + getProperty("generatorConfig"),
		"srcPath"        : projectDir.path + getProperty("srcPath"),
		"resourcePath"   : projectDir.path + getProperty("resourcePath")
	]
}

def getDbProperties = {
    def properties = new Properties()
    //这里最好读取 .properties 格式的文件，yml 不能正常读取
    mybatisGenerator.propertiesFile.withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate {
	group = 'util'
	description = 'Mybatis Generator.'
	doLast {
		def properties = getDbProperties()
		file(mybatisGenerator.srcPath).mkdirs()
		file(mybatisGenerator.resourcePath).mkdirs()
	    ant.properties['targetProject'] = projectDir.path
	    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	    ant.properties['userId'] = properties.getProperty("jdbc.username")
	    ant.properties['password'] = properties.getProperty("jdbc.password")
	    ant.properties['src_main_java'] = mybatisGenerator.srcPath
	    ant.properties['src_main_resources'] = mybatisGenerator.resourcePath
	    ant.properties['modelPackage'] = properties.getProperty("package.model")
	    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	    ant.taskdef(
	            name: 'mbgenerator',
	            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
	            classpath: configurations.mybatisGenerator.asPath
	    )
	    ant.mbgenerator(overwrite: true,
	            configfile: mybatisGenerator.generatorFile, verbose: true) {
	        propertyset {
	            propertyref(name: 'targetProject')
	            propertyref(name: 'userId')
	            propertyref(name: 'driverClass')
	            propertyref(name: 'connectionURL')
	            propertyref(name: 'password')
	            propertyref(name: 'src_main_java')
	            propertyref(name: 'src_main_resources')
	            propertyref(name: 'modelPackage')
	            propertyref(name: 'mapperPackage')
	            propertyref(name: 'sqlMapperPackage')
	        }
	    }
    }
}